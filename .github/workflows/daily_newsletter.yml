name: Daily Geopolitical Newsletter

on:
  schedule:
    # Run daily at 6:00 UTC (8:00 CET)
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no real API calls)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  # Only run on pushes to main that affect source code, not generated docs
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'requirements.txt'
      - '.github/workflows/daily_newsletter.yml'
      - '!docs/**'

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write

# Allow multiple concurrent runs for debugging, but still prevent conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create necessary directories
      run: |
        mkdir -p logs output docs

    - name: Set environment variables
      run: |
        # Required API keys from GitHub secrets
        echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> $GITHUB_ENV

        # Optional API keys
        if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
        fi

        # Newsletter configuration from secrets or defaults
        echo "NEWSLETTER_TITLE=${{ secrets.NEWSLETTER_TITLE || 'Geopolitical Daily' }}" >> $GITHUB_ENV
        echo "NEWSLETTER_AUTHOR=${{ secrets.NEWSLETTER_AUTHOR || 'Geopolitical Daily Team' }}" >> $GITHUB_ENV
        if [ -n "${{ secrets.NEWSLETTER_FROM_EMAIL }}" ]; then
          echo "NEWSLETTER_FROM_EMAIL=${{ secrets.NEWSLETTER_FROM_EMAIL }}" >> $GITHUB_ENV
        fi

        # Email notification settings
        if [ -n "${{ secrets.ADMIN_EMAIL }}" ]; then
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ secrets.SMTP_SERVER }}" ]; then
          echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ secrets.SMTP_PORT }}" ]; then
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ secrets.SMTP_USERNAME }}" ]; then
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ secrets.SMTP_PASSWORD }}" ]; then
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ secrets.SMTP_FROM_EMAIL }}" ]; then
          echo "SMTP_FROM_EMAIL=${{ secrets.SMTP_FROM_EMAIL }}" >> $GITHUB_ENV
        fi

        # System configuration
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "AI_MODEL=claude-3-haiku-20240307" >> $GITHUB_ENV
        echo "AI_MAX_TOKENS=4096" >> $GITHUB_ENV
        echo "CLEANUP_ENABLED=false" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV

        # Set dry run mode based on input or default to false for scheduled runs
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "DRY_RUN=true" >> $GITHUB_ENV
        else
          echo "DRY_RUN=false" >> $GITHUB_ENV
        fi

        # Allow overwriting existing newsletters for debugging (manual runs or debug mode)
        if [ "${{ github.event.inputs.dry_run }}" = "true" ] || [ "$DEBUG" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "ALLOW_OVERWRITE=true" >> $GITHUB_ENV
        else
          echo "ALLOW_OVERWRITE=false" >> $GITHUB_ENV
        fi

    - name: Validate configuration
      run: |
        python -c "
        from src.config import Config
        missing = Config.validate_config()
        if missing and not Config.DRY_RUN:
            print(f'❌ Missing configuration: {missing}')
            exit(1)
        else:
            print('✅ Configuration validated successfully')
        "

    - name: Test data collection
      run: |
        python test_simple_collection.py

    - name: Run newsletter pipeline
      run: |
        python -m src.main_pipeline

    - name: Check pipeline success
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ Newsletter pipeline completed successfully"
        else
          echo "❌ Newsletter pipeline failed"
          exit 1
        fi

    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

    - name: Upload newsletter artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: newsletter-${{ github.run_number }}
        path: |
          output/*.html
          docs/**/*
          logs/*.log
        retention-days: 30

    - name: Create issue on failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `Newsletter Pipeline Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          The daily newsletter pipeline failed during the scheduled run.

          **Run Details:**
          - Run ID: ${{ github.run_id }}
          - Run Number: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Time: ${new Date().toISOString()}

          **Next Steps:**
          1. Check the workflow logs for detailed error information
          2. Review the uploaded artifacts for any generated content
          3. Verify API keys and external service availability
          4. Consider running manually with dry-run mode for testing

          **Logs:** [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;

          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automation', 'newsletter']
          });

    - name: Summary
      if: always()
      run: |
        echo "## Newsletter Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry Run**: ${{ env.DRY_RUN }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

        # Check if newsletter was generated
        if [ -d "docs/newsletters" ] && [ "$(ls -A docs/newsletters)" ]; then
          echo "- **Newsletter**: ✅ Generated" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: $(ls docs/newsletters/newsletter-*.html | head -1 | xargs basename)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Newsletter**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi

        # Check if dashboard was updated
        if [ -f "docs/dashboard.html" ]; then
          echo "- **Dashboard**: ✅ Updated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Dashboard**: ❌ Missing" >> $GITHUB_STEP_SUMMARY
        fi

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-newsletter
    if: success()

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
